services:
  venture-vision-backend:
    image: venture-vision-backend
    container_name: venture-vision-backend-server
    pull_policy: never
    build:
      context: ${BACKEND_BASE_PATH:-../../}
      dockerfile: devops/local/Dockerfile
    restart: always
    env_file:
      - ${BACKEND_BASE_PATH:-../../}/.env
    volumes:
      - ${BACKEND_BASE_PATH:-../../}:/app
    networks:
      - ${NETWORK_NAME:-venture-vision-backend-network}
    ports:
      - ${BACKEND_PORT:-5000}:${BACKEND_PORT:-5000}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-5000}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 2G
  postgres:
    image: ${POSTGRES_IMAGE:-pgvector/pgvector:pg17}
    container_name: venture-vision-postgres
    restart: always
    ports:
      - ${POSTGRES_DATABASE_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
    volumes:
      - ${POSTGRES_CONTAINER_VOLUME_NAME:-venture-vision-postgres-data}:/var/lib/postgresql/data
      - ${BACKEND_BASE_PATH:-../../}/devops/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ${NETWORK_NAME:-venture-vision-backend-network}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DATABASE_USERNAME} -d ${POSTGRES_DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 2G

volumes:
  venture-vision-postgres-data:
    name: ${POSTGRES_CONTAINER_VOLUME_NAME:-venture-vision-postgres-data}

networks:
  venture-vision-backend-network:
    name: ${NETWORK_NAME:-venture-vision-backend-network}
    driver: bridge
